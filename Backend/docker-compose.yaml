version: "3.8"

volumes:
  rabbitmq_data:
  pgdata: 



services:
 
  ###################################
  # payment: The payment microservice
  ###################################
  payment:
    container_name: "payment"
    build:
      context: ./payment_microservice
      dockerfile: Dockerfile
    image: weiwen2022/payment:esd_proj
    restart: always
    environment:
      PYTHONUNBUFFERED: 1
      WEB_HOOK_SECRET: ${WEB_HOOK_SECRET}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_PUBLISHABLE_KEY: ${STRIPE_PUBLISHABLE_KEY}
      dbURL: mysql+mysqlconnector://root@host.docker.internal:3306/refund
    ports:
      - "4242:4242"
    networks:
      - kong-net
    
 
  #######################################################
  # pool Record: The pool microservice
  #######################################################
  pool:
    container_name: "pool"
    build:
      context: ./pool_microservice
      dockerfile: Dockerfile
    image: weiwen2022/pool:esd_proj
    restart: always
    environment:
      dbURL: mysql+mysqlconnector://root@host.docker.internal:3306/pool
      PYTHONUNBUFFERED: 1
    ports:
      - "5001:5001"
    networks:
      - kong-net

  ##################################
  # pool_request: The pool_request microservice
  ##################################
  pool_request:
    container_name: "pool_request"
    build:
      context: ./pool_request_microservice
      dockerfile: Dockerfile
    image: weiwen2022/pool_request:esd_proj
    restart: always
    environment:
      dbURL: mysql+mysqlconnector://root@host.docker.internal:3306/pool_request
      PYTHONUNBUFFERED: 1
    ports:
      - "5002:5002"
    networks:
      - kong-net

  ##################################
  # transaction: The transaction microservice
  ##################################
  transaction:
    container_name: "transaction"
    build:
      context: ./transaction_microservice
      dockerfile: Dockerfile
    image: weiwen2022/transaction:esd_proj
    restart: always
    environment:
      dbURL: mysql+mysqlconnector://root@host.docker.internal:3306/transaction
      PYTHONUNBUFFERED: 1
    ports:
      - "5003:5003"
    networks:
      - kong-net

  # ##################################
  # # user: The user microservice
  # #################################

  user:
    container_name: "user"
    build:
      context: ./user_microservice
      dockerfile: Dockerfile
    image: weiwen2022/user:esd_proj
    restart: always
    environment:
      dbURL: mysql+mysqlconnector://root@host.docker.internal:3306/user
      PYTHONUNBUFFERED: 1
    ports:
      - "5004:5004"
    networks:
      - kong-net



  ##################################
  # noti: The noti microservice
  ##################################
  notification:
    container_name: "notification"
    build:
      context: ./notification_microservice
      dockerfile: Dockerfile
    image: weiwen2022/notification:esd_proj
    restart: always
    depends_on:
      - rabbitmq
    environment:
      rabbit_host: rabbitmq
      rabbit_port: 5672
      dbURL: mysql+mysqlconnector://root@host.docker.internal:3306/notification
      PYTHONUNBUFFERED: 1
    ports:
      - "5005:5005"
    networks:
      - kong-net

  ##################################
  # error: The error microservice
  ##################################
  error:
    container_name: "error"
    build:
      context: ./error_microservice
      dockerfile: Dockerfile
    image: weiwen2022/error:esd_proj
    restart: always
    depends_on:
      - rabbitmq
    environment:
      rabbit_host: rabbitmq
      rabbit_port: 5672
      dbURL: mysql+mysqlconnector://root@host.docker.internal:3306/notification
      PYTHONUNBUFFERED: 1
    ports:
      - "5008:5008"
    networks:
      - kong-net


  ##################################
  # pool_mapping: The pool_mapping microservice
  ##################################
  pool_mapping:
    container_name: "pool_mapping"
    build:
      context: ./pool_mapping_consumer
      dockerfile: Dockerfile
    image: weiwen2022/pool_mapping:esd_proj
    restart: always
    depends_on:
      - rabbitmq
    environment:
      rabbit_host: rabbitmq
      rabbit_port: 5672
      dbURL: mysql+mysqlconnector://root@host.docker.internal:3306/pool
      PYTHONUNBUFFERED: 1
    networks:
      - kong-net
      
  ##################################
  # notification_consume: The notification_consume microservice
  ##################################
  notification_consume:
    container_name: "notification_consume"
    build:
      context: ./notification_consume
      dockerfile: Dockerfile
    image: weiwen2022/notification_consume:esd_proj
    restart: always
    depends_on:
      - rabbitmq
    environment:
      rabbit_host: rabbitmq
      rabbit_port: 5672
      dbURL: mysql+mysqlconnector://root@host.docker.internal:3306/notification
      PYTHONUNBUFFERED: 1
    networks:
      - kong-net

  ###############################################
  # payment complex Order: The payment complex microservice
  ###############################################
  payment_manage:
    build:
      context: ./payment_complexservice
      dockerfile: Dockerfile
    image: weiwen2022/payment_manage:esd
    restart: always
    depends_on:
      - payment
    environment:
      rabbit_host: rabbitmq
      rabbit_port: 5672
      PYTHONUNBUFFERED: 1
      WEB_HOOK_SECRET: ${WEB_HOOK_SECRET}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_PUBLISHABLE_KEY: ${STRIPE_PUBLISHABLE_KEY}
    ports:
      - "5101:5101"
    networks:
      - kong-net

  ####################################
  # RabbitMQ: The messaging broker   
  ####################################
  rabbitmq:
    image: rabbitmq:3-management
    hostname: esd-rabbit
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - ./rabbitmq.config:/etc/rabbitmq/rabbitmq.config
      - ./rabbitmq_definitions.json:/etc/rabbitmq/rabbitmq_definitions.json
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - kong-net
    

      

  ###############################################
  # pool_management: The pool_management microservice
  ###############################################
  pool_management:
    container_name: "pool_management"
    build:
      context: ./poolmanagement_complexservice
      dockerfile: Dockerfile
    image: weiwen2022/pool_management:esd
    restart: always
    depends_on:
      - user
      - transaction
      - pool_request
      - pool
      - payment
    environment:
      rabbit_host: rabbitmq
      rabbit_port: 5672
      PYTHONUNBUFFERED: 1
    ports:
      - "5100:5100"
    networks:
      - kong-net

  ###############################################
  # load_ui: The load_ui microservice
  ###############################################
  load_ui:
    build:
      context: ./load_ui_complexservice
      dockerfile: Dockerfile
    image: weiwen2022/load_ui:esd
    restart: always
    depends_on:
      - user
      - transaction
      - pool
    ports:
      - "5200:5200"
    networks:
      - kong-net

  ##################################
  # transaction: The transaction microservice
  ##################################
  transaction_consume:
    build:
      context: ./transaction_consume
      dockerfile: Dockerfile
    image: weiwen2022/transaction_consume:esd_proj
    restart: always
    depends_on:
      - rabbitmq
    environment:
      rabbit_host: rabbitmq
      rabbit_port: 5672
      dbURL: mysql+mysqlconnector://root@host.docker.internal:3306/transaction
      PYTHONUNBUFFERED: 1
    networks:
        - kong-net

  

  #######################################
  # Postgres: The database used by Kong
  #######################################
  kong-database:
    image: postgres:15 # tested 20231101; Ref: https://docs.konghq.com/gateway/latest/support/third-party/
    platform: linux/amd64  # <- required for Mac M1 chip. Otherwise, can remove
    restart: always
    networks:
      - kong-net
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - pgdata:/var/lib/postgresql/data

  #######################################
  # Kong database migration
  #######################################
  kong-migration:
    image: kong/kong-gateway:3.2.2.5 # tested 20231101
    platform: linux/amd64  # <- required for Mac M1 chip. Otherwise, can remove
    command: "kong migrations bootstrap"
    restart: on-failure
    networks:
      - kong-net
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: password
    depends_on:
      - kong-database

  #######################################
  # Kong: The API Gateway
  #######################################
  kong:
    image: kong/kong-gateway:3.2.2.5 # tested 20231101
    platform: linux/amd64  # <- required for Mac M1 chip. Otherwise, can remove
    restart: always
    networks:
      - kong-net
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: password
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_ADMIN_GUI_URL: http://localhost:8002
    depends_on:
      - kong-migration
    ports: # https://docs.konghq.com/gateway/latest/production/networking/default-ports/
      - "8000:8000" # Takes incoming HTTP traffic from Consumers, and forwards it to upstream Services.
      - "8443:8443" # Takes incoming HTTPS traffic from Consumers, and forwards it to upstream Services.
      - "8001:8001" # Admin API. Listens for calls from the command line over HTTP.
      - "8444:8444" # Admin API. Listens for calls from the command line over HTTPS.
      - "8002:8002" # Kong Manager (GUI). Listens for HTTP traffic.
      - "8445:8445" # Kong Manager (GUI). Listens for HTTPS traffic.
      - "8003:8003" # Dev Portal. Listens for HTTP traffic, assuming Dev Portal is enabled.
      - "8446:8446" # Dev Portal. Listens for HTTP traffic, assuming Dev Portal is enabled.
      - "8004:8004" # Dev Portal /files traffic over HTTPS, assuming the Dev Portal is enabled.
      - "8447:8447" # Dev Portal /files traffic over HTTPS, assuming the Dev Portal is enabled.




networks:
  kong-net:
    external: true